import configparser


# CONFIG
config = configparser.ConfigParser()
config.read('dwh.cfg')

# DROP TABLES

staging_events_table_drop = "DROP TABLE IF EXISTS staging_events"
staging_songs_table_drop = "DROP TABLE IF EXISTS staging_songs"
songplay_table_drop = "DROP TABLE IF EXISTS songplays"
user_table_drop = "DROP TABLE IF EXISTS users"
song_table_drop = "DROP TABLE IF EXISTS songs"
artist_table_drop = "DROP TABLE IF EXISTS artists"
time_table_drop = "DROP TABLE IF EXISTS time"

# CREATE TABLES
"""
According to Amazon,
The following is the syntax for creating a table:
CREATE [ [ LOCAL ] { TEMPORARY | TEMP } ] 
TABLE 
[ IF NOT EXISTS ] table_name
({ column_name data_type [column_attributes] [ column_constraints ] 
    | table_constraints 
    | LIKE parent_table [ { INCLUDING | EXCLUDING } DEFAULTS ] } 
    [, ... ])
[ BACKUP { YES | NO } ] 
[table_attribute]

where data_type are:
    SMALLINT (INT2) 
    INTEGER (INT, INT4) 
    BIGINT (INT8) DECIMAL (NUMERIC) 
    REAL (FLOAT4) 
    DOUBLE PRECISION (FLOAT8) 
    BOOLEAN (BOOL) 
    CHAR (CHARACTER) 
    VARCHAR (CHARACTER VARYING)
    DATE 
    TIMESTAMP 
    TIMESTAMPTZ 
    GEOMETRY

where column_attributes are:
  [ DEFAULT default_expr ]
  [ IDENTITY ( seed, step ) ] 
  [ GENERATED BY DEFAULT AS IDENTITY ( seed, step ) ]             
  [ ENCODE encoding ] 
  [ DISTKEY ]
  [ SORTKEY ]

and column_constraints are:
  [ { NOT NULL | NULL } ]
  [ { UNIQUE  |  PRIMARY KEY } ]
  [ REFERENCES reftable [ ( refcolumn ) ] ]

and table_constraints  are:
  [ UNIQUE ( column_name [, ... ] ) ]
  [ PRIMARY KEY ( column_name [, ... ] )  ]
  [ FOREIGN KEY (column_name [, ... ] ) REFERENCES reftable [ ( refcolumn ) ] 

and table_attributes are:
  [ DISTSTYLE { AUTO | EVEN | KEY | ALL } ] 
  [ DISTKEY ( column_name ) ]
  [ [COMPOUND | INTERLEAVED ] SORTKEY ( column_name [, ...] ) ]
"""
staging_events_table_create= ("""
CREATE TABLE IF NOT EXISTS staging_events 
(
userId INTEGER NOT NULL PRIMARY KEY,
artist VARCHAR(255) NOT NULL,
auth VARCHAR(255) NOT NULL,
firstName VARCHAR(255) NOT NULL,
gender VARCHAR(255) NOT NULL,
itemSession INTEGER NOT NULL,
lastName VARCHAR(255) NOT NULL,
length INTEGER,
level VARCHAR(255) NOT NULL,
location VARCHAR(255) NOT NULL,
method VARCHAR(255) NOT NULL,
page VARCHAR(255) NOT NULL,
registration INTEGER NOT NULL,
sessionId INTEGER NOT NULL,
song VARCHAR(255),
status INTEGER NOT NULL,
ts TIMESTAMP NOT NULL,
userAgent VARCHAR(255) NOT NULL
)
""")

staging_songs_table_create = ("""
CREATE TABLE IF NOT EXISTS staging_songs
(
song_id VARCHAR(255) NOT NULL PRIMARY KEY,
num_songs INTEGER NOT NULL,
artist_id VARCHAR(255) NOT NULL,
artist_latitude INTEGER,
artist_longitude INTEGER,
artist_location VARCHAR(255) NOT NULL,
artist_name VARCHAR(255) NOT NULL,
title VARCHAR(255) NOT NULL,
duration INTEGER NOT NULL,
year INTEGER NOT NULL
)
""")

songplay_table_create = ("""
CREATE TABLE IF NOT EXISTS songplay
(
songplay_id INTEGER PRIMARY KEY, 
timemstamp TIMESTAMP NOT NULL, 
user_id INTEGER NOT NULL, 
level INTEGER NOT NULL,
song_id INTEGER NOT NULL, 
artist_id INTEGER NOT NULL, 
session_id INTEGER, 
location INTEGER, 
user_agent INTEGER
)
""")

user_table_create = ("""
CREATE TABLE IF NOT EXISTS users
(
user_id INTEGER PRIMARY KEY, 
first_name VARCHAR(255) NOT NULL, 
last_name VARCHAR(255) NOT NULL, 
gender BOOLEAN NOT NULL, 
level INTEGER NOT NULL
)
""")

song_table_create = ("""
CREATE TABLE IF NOT EXISTS songs
(
song_id VARCHAR(255) PRIMARY KEY, 
title VARCHAR(255) NOT NULL, 
artist_id INTEGER NOT NULL, 
year INTEGER NOT NULL, 
duration INTEGER NOT NULL
)
""")

artist_table_create = ("""
CREATE TABLE IF NOT EXISTS artists
(
artist_id INTEGER PRIMARY KEY, 
name VARCHAR(255) NOT NULL, 
location VARCHAR(255) NOT NULL, 
longitude INTEGER NOT NULL, 
latitude INTEGER NOT NULL
)
""")

time_table_create = ("""
CREATE TABLE IF NOT EXISTS time
(
timestamp INTEGER PRIMARY KEY, 
hour INTEGER NOT NULL, 
day INTEGER NOT NULL, 
week INTEGER NOT NULL, 
month INTEGER NOT NULL, 
year INTEGER NOT NULL, 
weekday INTEGER NOT NULL
)
""")

# STAGING TABLES
"""
According to Amazon,
The syntax to specify the files to be loaded by using a prefix is as follows:
copy <table_name> from 's3://<bucket_name>/<object_prefix>'
authorization;
"""
staging_events_copy = ("""
copy staging_events from 's3://udacity-dend/log_data'
credentials 'aws_iam_role={}'
""").format(*config['IAM_ROLE'].values())

staging_songs_copy = ("""
copy staging_songs from 's3://udacity-dend/song_data'
credentials 'aws_iam_role={}'
""").format(*config['IAM_ROLE'].values())

# FINAL TABLES

"""
According to Amazon,
[ WITH with_subquery [, ...] ]
SELECT
[ TOP number ] [ ALL | DISTINCT ]
* | expression [ AS output_name ] [, ...]
INTO [ TEMPORARY | TEMP ] [ TABLE ] new_table
[ FROM table_reference [, ...] ]
[ WHERE condition ]
[ GROUP BY expression [, ...] ]
[ HAVING condition [, ...] ]
[ { UNION | INTERSECT | { EXCEPT | MINUS } } [ ALL ] query ]
[ ORDER BY expression
[ ASC | DESC ]
[ LIMIT { number | ALL } ]
[ OFFSET start ]
"""

songplay_table_insert = ("""
INSERT INTO songplays (start_time, user_id, level, song_id, artist_id, session_id, location, user_agent)
  SELECT events.start_time, events.user_id, events.level, songs.song_id, songs.artist_id, events.session_id, events.location, events.useragent
  FROM (SELECT TIMESTAMP 'epoch' + ts/1000 * interval '1 second' AS start_time, *
    FROM staging_events
    WHERE page='NextSong') events
  LEFT JOIN staging_songs songs
  ON events.song = songs.title
  AND events.artist = songs.artist_name
  AND events.length = songs.duration
""")

user_table_insert = ("""
INSERT INTO users (user_id, first_name, last_name, gender, level)
  SELECT events.start_time, events.user_id, events.level, songs.song_id, songs.artist_id, events.session_id, events.location, events.useragent
  FROM (SELECT TIMESTAMP 'epoch' + ts/1000 * interval '1 second' AS start_time, *
    FROM staging_events
    WHERE page='NextSong') events
  LEFT JOIN staging_songs songs
  ON events.song = songs.title
  AND events.artist = songs.artist_name
  AND events.length = songs.duration
""")

song_table_insert = ("""
INSERT INTO songs
(select * from staging_songs);
""")

artist_table_insert = ("""
INSERT INTO artists
(select * from staging_songs);
ON CONFLICT(artist_id) DO NOTHING
""")

time_table_insert = ("""
INSERT INTO time (timestamp, hour, day, week, month, year, weekday)
  SELECT events.start_time
  FROM (SELECT TIMESTAMP 'epoch' + ts/1000 * interval '1 second' AS start_time, *
    FROM staging_events
    WHERE page='NextSong') events
  LEFT JOIN staging_songs songs
  ON events.song = songs.title
  AND events.artist = songs.artist_name
  AND events.length = songs.duration
""")

# QUERY LISTS

create_table_queries = [staging_events_table_create, staging_songs_table_create, songplay_table_create, user_table_create, song_table_create, artist_table_create, time_table_create]
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]
copy_table_queries = [staging_events_copy, staging_songs_copy]
insert_table_queries = [songplay_table_insert, user_table_insert, song_table_insert, artist_table_insert, time_table_insert]


